classdef sogRovingByTrial < marmodata.mdbase

    properties
        keyReactionWindow = 2000; %temporal window after oddball fixation onset  within which keypress is registered as hit [ms]
    end

    properties
        % stimulus
        patchDir; %direction of patch [deg]
        radius; %radius of patches in [deg]
        patchDirList; %list of stimulus directions
        patchSpeed; %stimulus speed [deg/s]
        tDur; %duration of a sequence of every trials [ms]
        patchStart; %onset times of patch in each trial [ms]
        patchStop; %offset times of patch in each trial [ms]
        onFrames;
        offFrames;
        frameRate;
        nPresentationsRange;
        patchFrequency;
        ctrl; %1: equiprobable. 0: roving

        % reward
        rewardVol;
        rewardRate;
        pReward;
        rewardTimes; %time of reward in each trial

        % behavioural response
        probOddFixation;
        oddFixationTime;
        keyPressTime; %time when a key is perssed first time in a trial [ms]
        reactionTime;

        % eye movement
        eye_rm; %eye position after removal of blinks
    end

    methods (Access = public)
        function d = sogRovingByTrial(varargin)
            d@marmodata.mdbase(varargin{:}); % base class constructor

            d.radius = getRadius(d); %radius of patches in [deg]
            d.patchDirList = getPatchDirList(d); %list of stimulus directions
            d.tDur = getTDur(d); %duration of a sequence [ms]
            d.onFrames = getOnFrames(d);
            d.offFrames = getOffFrames(d);
            d.frameRate = getFrameRate(d);
            d.nPresentationsRange = getNPresentationsRange(d);
            d.patchSpeed = getPatchSpeed(d);
            d.patchFrequency = getPatchFrequency(d);
            d.ctrl = getCtrl(d);
            d.patchDir = getPatchDir(d); %direction of patch [deg]
            d.patchStart = getPatchStart(d); %onset times of patch
            % d.patchStop = getPatchStop(d); %offset times of patch
            
            % % reward
            d.rewardVol = getRewardVol(d);
            d.rewardRate = getRewardRate(d);
            d.pReward = getPReward(d);
            d.rewardTimes = getRewardTime(d);

            %% keypress
            d.fixOn = getFixOn(d);
            d.probOddFixation = getProbOddFixation(d);
            if fixOn
                d.keyPressTime = getKeyPressTime(d); %time of key press after trial onset
                d.oddFixationTime = getOddFixationTime(d);
                d.reactionTime = getReactionTime(d); %time of key press after odd fixation
            end

            %% eye
            if ~isempty(d.eye)
                d.eye_rm = rmBlink(d);
            end

        end

        function eye_rm = rmBlink(d)
            for itr = 1:d.numTrials
                eye_rm(itr,1) = d.eye(itr).rmBlinks('dt',median(diff(d.eye(itr).t)), 'duration', 0.01, 'debug', false); %marmodata/+marmodata/@eye/rmBlinks.m
                %eye_rm(itr,1) = tmp.rmSaccades('debug',false,'sargs',{'accthresh', d.accThresh}); %marmodata/+marmodata/@eye/rmSaccades.m
                %cf. fitKernel/selectSaccades
                %close all
            end
        end

        function fixOn = getFixOn(d)
            fixOn = d.meta.cic.fixOn.data;
        end

        function rewardVol = getRewardVol(d)
            rewardVol = d.meta.fixbhv.rewardVolume.data;
        end

        function rewardRate = getRewardRate(d)
            rewardRate = d.meta.fixbhv.rewardRate.data;
        end

        function pReward = getPReward(d)
            pReward = d.meta.fixbhv.pReward.data;
        end

        function rewardTime = getRewardTime(d) %from fitKernel/getRewardTimes
            %not yet tested
            rewardTime = nan(d.numTrials,1);
            try
                for itr = 1:d.numTrials
                    [time_d, trialInfo, frame, data] = d.meta.newera.item2delivered('trial',itr);
                    if ~isempty(time_d)
                        rewardTime(itr) = time_d(end) - d.meta.cic.firstFrame('trial',itr).time;
                    else
                        rewardTime(itr) = nan;
                    end
                end
            end
        end

        function probOddFixation = getProbOddFixation(d)
            probOddFixation = d.meta.fixstim.probOddFixation('time',Inf).data;
        end

        function nPresentationsRange = getNPresentationsRange(d)
            nPresentationsRange = d.meta.cic.nPresentationsRange.data;
        end

        function radius = getRadius(d)
            radius =  unique(d.meta.patch1.sigma('time',inf).data);
        end

        function ctrl = getCtrl(d)
            ctrl = unique(d.meta.cic.ctrl('time',inf).data);
        end

        function tDur = getTDur(d)
            tDur = d.meta.cic.trialDuration('time',Inf).data;
        end

        function patchFrequency = getPatchFrequency(d)
            patchFrequency = unique(d.meta.patch1.frequency('time', Inf).data);
        end

        function patchSpeed = getPatchSpeed(d)
            patchSpeed = unique(d.meta.patch1.speed('time', Inf).data);
        end

        function keyPressTime = getKeyPressTime(d) %FIXME only 1st key press is returned
            %get time of key press from the onset of each trial [ms]

            t0 =  d.meta.cic.firstFrame('time',Inf);

            keyPressTime = cell(d.numTrials, 1);
            for itr = 1:d.numTrials
                % [time,trial,frame,keyTmp] = d.meta.keypress.keyIx('trial',itr);
                [time,trial,frame,keyTmp] = d.meta.cic.pressedKey('trial',itr);

                ignoreEntry = cellfun(@isempty, keyTmp);
                keepInd = find(~ignoreEntry);
                time = time(~ignoreEntry);
                trial = trial(~ignoreEntry);
                frame = frame(~ignoreEntry);
                key = keyTmp(~ignoreEntry);

                keyPressTime{itr} = 1e3*(time - t0(itr));
                if isempty( keyPressTime{itr})
                    keyPressTime{itr} = NaN;
                end
            end

        end

        function oddFixationTime = getOddFixationTime(d)

            [time, trial, frame, data] = d.meta.fixstim.color;

            standard = cellfun(@(x)(x(1)==1), data);
            ignoreEvents = ((frame<0) + standard) > 0;
            time = time(~ignoreEvents);
            trial = trial(~ignoreEvents);

            oddFixationTime = cell(d.numTrials, 1);
            for itr = 1:d.numTrials
                t0 =  d.meta.cic.firstFrame('trial',itr);
                theseEvents = find(trial == itr);
                if ~isempty(time(theseEvents))
                    oddFixationTime{itr} = 1e3*(time(trial == itr) - t0);
                else
                    oddFixationTime{itr} = NaN;
                end
            end

        end

        function [reactionTime, responseType] = getReactionTime(d)
            oddFixationTime = d.getOddFixationTime;
            keyPressTime = d.getKeyPressTime;

            oddFixationTime_all = [];
            keyPressTime_all = [];
            for itr = 1:d.numTrials
                t0 =  d.meta.cic.firstFrame('trial',itr);
                if ~isnan(oddFixationTime{itr})
                    oddFixationTime_all = [oddFixationTime_all oddFixationTime{itr}+1e3*t0];
                end
                if ~isnan(keyPressTime{itr})
                    keyPressTime_all = [keyPressTime_all keyPressTime{itr}+1e3*t0];
                end
            end

            reactionTime = zeros(numel(oddFixationTime_all),1);
            for ii = 1:numel(oddFixationTime_all)
                candidateEvents =  find(keyPressTime_all - oddFixationTime_all(ii) >0);
                [reactionTime(ii)] = min(keyPressTime_all(candidateEvents) - oddFixationTime_all(ii));
            end
            miss = find(reactionTime > keyReactionWindow);
            hit = find(reactionTime < keyReactionWindow);

            responseType = zeros(numel(oddFixationTime_all),1);
            responseType(hit) = 1;
            responseType(miss) = 0;
        end

        function frameRate = getFrameRate(d)
            test = d.meta.cic.screen.data(1);
            frameRate = test{1}.frameRate;
        end

        function onFrames = getOnFrames(d)
            onFrames = d.meta.cic.onFrames.data;
        end

        function offFrames = getOffFrames(d)
            offFrames = d.meta.cic.offFrames.data;
        end

        function patchDirList = getPatchDirList(d)
            patchDirList = d.meta.cic.dirList.data;
        end

        function patchDir = getPatchDir(d)
            %patch direction of every presentations of every trials

            tDur_cycle = (d.onFrames + d.offFrames)*1000/d.frameRate; %[ms]

            patchDir = cell(d.numTrials,1);
            for itr = 1:d.numTrials
                thisCond = d.condIds(itr);%d.meta.cic.condition('trial',itr).data

                %tDur = d.meta.(sprintf('patch%d',thisCond)).tDur('time',inf,'trial',itr).data; %INCORRECT
                nPresentations = round(d.tDur(itr) / tDur_cycle);

                if d.meta.cic.ctrl.data == 0 %roving
                    patchDir{itr} = d.patchDirList(thisCond) * ones(1, nPresentations);
                elseif d.meta.cic.ctrl.data == 1 %random equiprobable
                    [time, data_tmp] = getRSVP(d, 'direction', itr);

                    mipi = median(diff(time));

                    recorded = ones(nPresentations,1);
                    for istim = 1:nPresentations-1
                        try
                            if time(istim+1) - time(istim) > 1.2*mipi
                                recorded(istim+1) = 0;
                                time = [time(1:istim) time(istim)+mipi time(istim+1:end)];
                            end
                        catch err
                            recorded(istim+1) = 0;
                        end
                    end
                    data = nan(1,nPresentations);
                    data(recorded==1) = data_tmp;
                    redundantIdx = find(recorded==0)-1;
                    data(recorded==0) = data(redundantIdx);
                    patchDir{itr} = data; %error when two successive stimuli are the same directions
                    %patchStart{itr} = time;
                end
            end
        end


        function patchStart = getPatchStart(d)
            %all patch start times from the start of each trial

            patchStart = cell(d.numTrials, 1);
            for itr = 1:d.numTrials
                t0 = d.meta.cic.firstFrame('time',Inf, 'trial',itr); %= d.meta.(sprintf('patch%d',thisCond)).startTime('trial',itr);
                [time, data] = getRSVP(d, 'rsvpIsi', itr);
                okIdx = data == 0;
                patchStart{itr} = time(okIdx) - t0;
            end
        end

        function fig = showEyePos_cat(d)
            %show eye position within a sequence

            [eyeData_cat, meta_cat] = sogAnalysis.concatenate_eye(d.eye, d);%d.eye_rm, d);

            fig = figure('position',[0 0 1900 600]);
            subplot(211);
            plot(eyeData_cat.t, eyeData_cat.x, eyeData_cat.t, eyeData_cat.y);

            xlim([eyeData_cat.t(1), eyeData_cat.t(end)]);
            showRange = 1.2*[-d.radius d.radius];
            ylim(showRange);
            hline([-d.radius d.radius]);
            vbox(meta_cat.STARTBLINK, meta_cat.ENDBLINK);

            vline()

            patchStart_cat = [];
            patchEnd_cat = [];
            rewardTimes_cat = [];
            patchDir_cat = [];
            t_cat = [];

            for itr = 1:d.numTrials
                if isempty(t_cat)
                    t0 = d.eye(itr).t(1);
                elseif ~isempty(d.eye(itr).t)
                    t0 =  max(t_cat)-d.eye(itr).t(1)+d.eye(itr).dt;
                end
                if ~isempty(d.eye(itr).t)
                    t_cat = cat(1, t_cat, d.eye(itr).t+t0);
                end
                t_cat = t_cat(~isnan(t_cat));
                [t_cat, ix] = unique(t_cat);

                patchStart_cat = [patchStart_cat d.patchStart{itr} + t0];
                patchEnd_cat = [patchEnd_cat d.patchStart{itr}+d.onFrames/d.frameRate + t0]; %HACK
                rewardTimes_cat = [rewardTimes_cat d.rewardTimes(itr)];
                patchDir_cat = [patchDir_cat d.patchDir{itr}];
            end

            vline(rewardTimes_cat,gca,'-','g');
            dirColor = [hsv(numel(d.patchDirList)) .5*ones(numel(d.patchDirList),1)];
            [~, patchDirIdx] = ismember(patchDir_cat, d.patchDirList);
            vbox(patchStart_cat, patchEnd_cat, gca, dirColor(patchDirIdx,:));

            eyeInPatch = sum(sqrt(eyeData_cat.x.^2+eyeData_cat.y.^2) < d.radius)/numel(eyeData_cat.t)*100;
            title(sprintf('eye within patch: %.1f%%', eyeInPatch));
            xlabel('time[s]'); legend('x','y');

            subplot(212);
            histogram2(eyeData_cat.x, eyeData_cat.y, showRange(1):1:showRange(2),...
                showRange(1):1:showRange(2), 'FaceColor','flat','DisplayStyle','tile','ShowEmptyBins','on',...
                'EdgeColor','none');
            axis square;
            hline(0,gca,'','w'); vline(0,gca,'','w');
        end

        function [dt,complete] = getDuration(d,trialId,varargin)
            %from
            %marmolab-stimuli/+tuning/+analysis/oriXrsvp.getDuration

            thisCond = d.condIds(trialId);
            dt = d.meta.(sprintf('patch%d',thisCond)).stopTime('trial',trialId).time - ...
                d.meta.(sprintf('patch%d',thisCond)).startTime('trial',trialId).time; % grating duration(s)
            complete = dt >= d.meta.cic.trialDuration('trial',trialId,'time',Inf).data/1e3 - 10e-6; % ms --> s
        end

        function [t,val] = getRSVP(d,param,trialId)
            %from     marmolab-stimuli/+tuning/+analysis/oriXrsvp.getRSVP
            assert(ischar(param) && ~isempty(param),'You must provide a parameter name.');


            scr = d.meta.cic.screen.data; scr = scr{1};

            dt = d.getDuration(trialId);
            nrFrames = round(dt.*scr.frameRate);


            thisCond = d.condIds(trialId);%d.meta.cic.condition('trial',trialIds).data

            firstFrame = d.meta.(sprintf('patch%d',thisCond)).startTime('trial',trialId).time;

            [t,~,~,v] = d.meta.(sprintf('patch%d',thisCond)).(param)('trial',trialId);

            idx = t < firstFrame;
            if any(idx)
                % drop entries corresponding to (re-)setting of the default value
                % between trials
                idx = t < max(t(idx));

                t(idx) = [];
                v(idx) = [];

                t(1) = firstFrame; % necessary?
            else
                % we end up here if the first value is equal to the default
                % value, and which happens to equal the last vale on the
                % previous trial... so we have no t < firstFrame
                t = [firstFrame, t];

                lastVal = d.meta.(sprintf('patch%d',thisCond)).(param)('trial',trialId-1,'time',Inf).data;
                v = [lastVal, v];
            end

            t = [t, d.meta.cic.trialStopTime('trial',trialId).time];

            n = round(diff(t).*scr.frameRate);

            % assert(sum(n) == nrFrames,'Frame count mismatch on trial %i.',trialId);
            if sum(n) ~= nrFrames
                warning(['Trial ' num2str(trialId) 'Frame count mismatch']);
            end
            val = cell2mat(v);
            %val = reshape(repelem(cell2mat(v),n),[],1);
        end

    end
end